{
  "name": "auto-header",
  "displayName": "C/C++ Auto Header",
  "description": "Automatically add and manage header files for C/C++ source files",
  "version": "0.0.2",
  "engines": {
    "vscode": "^1.99.0"
  },
  "categories": [
    "Other",
    "Programming Languages",
    "Snippets"
  ],
  "keywords": [
    "c++",
    "c",
    "header",
    "include",
    "automation"
  ],
  "icon": "images/icon.png",
  "publisher": "hydavinci",
  "repository": {
    "type": "git",
    "url": "https://github.com/hydavinci/auto-header"
  },
  "activationEvents": [
    "onLanguage:c",
    "onLanguage:cpp",
    "onLanguage:csharp"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "auto-header.run",
        "title": "Include Header File"
      },
      {
        "command": "auto-header.createAndInclude",
        "title": "Create and Include Header File"
      },
      {
        "command": "auto-header.sortIncludes",
        "title": "Sort Include Statements"
      },
      {
        "command": "auto-header.switchHeaderSource",
        "title": "Switch Between Header and Source"
      }
    ],
    "keybindings": [
      {
        "command": "auto-header.run",
        "key": "ctrl+k ctrl+h",
        "mac": "cmd+k cmd+h",
        "when": "editorTextFocus && editorLangId =~ /^(c|cpp|csharp)$/"
      },
      {
        "command": "auto-header.switchHeaderSource",
        "key": "f4",
        "mac": "f4",
        "when": "editorTextFocus && editorLangId =~ /^(c|cpp|csharp|h)$/"
      }
    ],
    "configuration": {
      "title": "C/C++ Auto Header",
      "properties": {
        "autoHeader.supportedExtensions": {
          "type": "array",
          "default": [".c", ".cpp", ".cc", ".cxx"],
          "description": "Supported C/C++ source file extensions"
        },
        "autoHeader.headerExtensions": {
          "type": "array",
          "default": [".h", ".hpp", ".hxx"],
          "description": "Header file extensions to search for, ordered by priority"
        },
        "autoHeader.insertEmptyLineAfter": {
          "type": "boolean",
          "default": true,
          "description": "Add an empty line after the inserted include statement"
        },
        "autoHeader.includeFormat": {
          "type": "string",
          "enum": ["quotes", "brackets"],
          "default": "quotes",
          "description": "Include format for header files, quotes uses \"\", brackets uses <>"
        },
        "autoHeader.headerTemplate": {
          "type": "string",
          "default": "#pragma once\n\n// Header file for ${filename}\n\n",
          "description": "Template for new header files, use ${filename} as a placeholder for the file name"
        },
        "autoHeader.askBeforeCreating": {
          "type": "boolean",
          "default": true,
          "description": "Ask user before creating a new header file"
        },
        "autoHeader.sortIncludes": {
          "type": "boolean",
          "default": false,
          "description": "Automatically sort include statements after adding a new header"
        },
        "autoHeader.cacheDuration": {
          "type": "number",
          "default": 5000,
          "description": "Duration in milliseconds to cache file existence information (set to 0 to disable caching)"
        },
        "autoHeader.groupIncludesByType": {
          "type": "boolean",
          "default": true,
          "description": "When sorting, group system includes (<>) first, followed by project includes (\"\")"
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "when": "editorLangId =~ /^(c|cpp|csharp)$/",
          "command": "auto-header.run",
          "group": "1_modification"
        },
        {
          "when": "editorLangId =~ /^(c|cpp|csharp)$/",
          "command": "auto-header.createAndInclude",
          "group": "1_modification"
        },
        {
          "when": "editorLangId =~ /^(c|cpp|csharp)$/",
          "command": "auto-header.sortIncludes",
          "group": "1_modification"
        },
        {
          "when": "editorLangId =~ /^(c|cpp|csharp|h)$/",
          "command": "auto-header.switchHeaderSource",
          "group": "1_modification"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test",
    "analyze": "node esbuild.js --analyze --production"
  },
  "devDependencies": {
    "@types/vscode": "^1.99.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "eslint": "^9.25.1",
    "esbuild": "^0.25.3",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.3",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "esbuild-visualizer": "^0.7.1"
  }
}
